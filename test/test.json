{
  "message": "fix(dashboard): exit markdown edit mode when clicking outside of element (#35336)",
  "sha": "553204e6138074399b174ab6905d16040bb7988a",
  "og_diff": "@@ -17,7 +17,13 @@\n  * under the License.\n  */\n import { Provider } from 'react-redux';\n-import { act, render, screen, fireEvent } from 'spec/helpers/testing-library';\n+import {\n+  act,\n+  render,\n+  screen,\n+  fireEvent,\n+  userEvent,\n+} from 'spec/helpers/testing-library';\n import { mockStore } from 'spec/fixtures/mockStore';\n import { dashboardLayout as mockLayout } from 'spec/fixtures/mockDashboardLayout';\n import MarkdownConnected from './Markdown';\n@@ -45,6 +51,7 @@ describe('Markdown', () => {\n   };\n \n   beforeAll(() => {\n+    const originalError = console.error;\n     jest.spyOn(console, 'error').mockImplementation(msg => {\n       if (\n         typeof msg === 'string' &&\n@@ -53,7 +60,7 @@ describe('Markdown', () => {\n         !msg.includes('Warning: React does not recognize') &&\n         !msg.includes(\"Warning: Can't perform a React state update\")\n       ) {\n-        console.error(msg);\n+        originalError.call(console, msg);\n       }\n     });\n   });\n@@ -335,4 +342,75 @@ describe('Markdown', () => {\n     // Check that width is no longer 248px\n     expect(updatedParent).not.toHaveStyle('width: 248px');\n   });\n+\n+  test('shouldFocusMarkdown returns true when clicking inside markdown container', async () => {\n+    await setup({ editMode: true });\n+\n+    const markdownContainer = screen.getByTestId(\n+      'dashboard-component-chart-holder',\n+    );\n+\n+    userEvent.click(markdownContainer);\n+\n+    expect(await screen.findByRole('textbox')).toBeInTheDocument();\n+  });\n+\n+  test('shouldFocusMarkdown returns false when clicking outside markdown container', async () => {\n+    await setup({ editMode: true });\n+\n+    const markdownContainer = screen.getByTestId(\n+      'dashboard-component-chart-holder',\n+    );\n+\n+    userEvent.click(markdownContainer);\n+\n+    expect(await screen.findByRole('textbox')).toBeInTheDocument();\n+\n+    userEvent.click(document.body);\n+    await new Promise(resolve => setTimeout(resolve, 50));\n+\n+    expect(screen.queryByRole('textbox')).not.toBeInTheDocument();\n+  });\n+\n+  test('shouldFocusMarkdown keeps focus when clicking on menu items', async () => {\n+    await setup({ editMode: true });\n+\n+    const markdownContainer = screen.getByTestId(\n+      'dashboard-component-chart-holder',\n+    );\n+\n+    userEvent.click(markdownContainer);\n+\n+    expect(await screen.findByRole('textbox')).toBeInTheDocument();\n+\n+    const editButton = screen.getByText('Edit');\n+\n+    userEvent.click(editButton);\n+    await new Promise(resolve => setTimeout(resolve, 50));\n+\n+    expect(screen.queryByRole('textbox')).toBeInTheDocument();\n+  });\n+\n+  test('should exit edit mode when clicking outside in same row', async () => {\n+    await setup({ editMode: true });\n+\n+    const markdownContainer = screen.getByTestId(\n+      'dashboard-component-chart-holder',\n+    );\n+\n+    userEvent.click(markdownContainer);\n+\n+    expect(await screen.findByRole('textbox')).toBeInTheDocument();\n+\n+    const outsideElement = document.createElement('div');\n+    outsideElement.className = 'grid-row';\n+    document.body.appendChild(outsideElement);\n+\n+    userEvent.click(outsideElement);\n+    await new Promise(resolve => setTimeout(resolve, 50));\n+\n+    expect(screen.queryByRole('textbox')).not.toBeInTheDocument();\n+\n+    document.body.removeChild(outsideElement);\n+  });\n });",
  "mod_diff": "mmm a / superset-frontend/src/dashboard/components/gridComponents/Markdown/Markdown.test.jsx <nl> ppp b / superset-frontend/src/dashboard/components/gridComponents/Markdown/Markdown.test.jsx <nl>  * under the License.\n  */\n import { Provider } from 'react-redux';\n-import { act, render, screen, fireEvent } from 'spec/helpers/testing-library';\n+import {\n+  act,\n+  render,\n+  screen,\n+  fireEvent,\n+  userEvent,\n+} from 'spec/helpers/testing-library';\n import { mockStore } from 'spec/fixtures/mockStore';\n import { dashboardLayout as mockLayout } from 'spec/fixtures/mockDashboardLayout';\n import MarkdownConnected from './Markdown';\n   };\n \n   beforeAll(() => {\n+    const originalError = console.error;\n     jest.spyOn(console, 'error').mockImplementation(msg => {\n       if (\n         typeof msg === 'string' &&\n         !msg.includes('Warning: React does not recognize') &&\n         !msg.includes(\"Warning: Can't perform a React state update\")\n       ) {\n-        console.error(msg);\n+        originalError.call(console, msg);\n       }\n     });\n   });\n     // Check that width is no longer 248px\n     expect(updatedParent).not.toHaveStyle('width: 248px');\n   });\n+\n+  test('shouldFocusMarkdown returns true when clicking inside markdown container', async () => {\n+    await setup({ editMode: true });\n+\n+    const markdownContainer = screen.getByTestId(\n+      'dashboard-component-chart-holder',\n+    );\n+\n+    userEvent.click(markdownContainer);\n+\n+    expect(await screen.findByRole('textbox')).toBeInTheDocument();\n+  });\n+\n+  test('shouldFocusMarkdown returns false when clicking outside markdown container', async () => {\n+    await setup({ editMode: true });\n+\n+    const markdownContainer = screen.getByTestId(\n+      'dashboard-component-chart-holder',\n+    );\n+\n+    userEvent.click(markdownContainer);\n+\n+    expect(await screen.findByRole('textbox')).toBeInTheDocument();\n+\n+    userEvent.click(document.body);\n+    await new Promise(resolve => setTimeout(resolve, 50));\n+\n+    expect(screen.queryByRole('textbox')).not.toBeInTheDocument();\n+  });\n+\n+  test('shouldFocusMarkdown keeps focus when clicking on menu items', async () => {\n+    await setup({ editMode: true });\n+\n+    const markdownContainer = screen.getByTestId(\n+      'dashboard-component-chart-holder',\n+    );\n+\n+    userEvent.click(markdownContainer);\n+\n+    expect(await screen.findByRole('textbox')).toBeInTheDocument();\n+\n+    const editButton = screen.getByText('Edit');\n+\n+    userEvent.click(editButton);\n+    await new Promise(resolve => setTimeout(resolve, 50));\n+\n+    expect(screen.queryByRole('textbox')).toBeInTheDocument();\n+  });\n+\n+  test('should exit edit mode when clicking outside in same row', async () => {\n+    await setup({ editMode: true });\n+\n+    const markdownContainer = screen.getByTestId(\n+      'dashboard-component-chart-holder',\n+    );\n+\n+    userEvent.click(markdownContainer);\n+\n+    expect(await screen.findByRole('textbox')).toBeInTheDocument();\n+\n+    const outsideElement = document.createElement('div');\n+    outsideElement.className = 'grid-row';\n+    document.body.appendChild(outsideElement);\n+\n+    userEvent.click(outsideElement);\n+    await new Promise(resolve => setTimeout(resolve, 50));\n+\n+    expect(screen.queryByRole('textbox')).not.toBeInTheDocument();\n+\n+    document.body.removeChild(outsideElement);\n+  });\n });"
}
